export interface Options {
  baseUrl: string;
}

export class {{clientName}} {
  constructor(private readonly http: HttpService, private readonly options: Options) {}

  {{#each paths}}
    {{#each .}}
      protected _{{operationId @../key @key .}}(
        {{#if parameters}}
          {{#hasPathParams .}}pathArgs: {{pascalCase (operationId @../key @key .)}}PathArgs,{{/hasPathParams}} 
          {{#hasQueryParams .}}queryArgs: {{pascalCase (operationId @../key @key .)}}QueryArgs,{{/hasQueryParams}} 
          {{#hasBodyParams .}}bodyArgs: {{#with (bodyParam .)}} {{schemaType schema}} {{/with}},{{/hasBodyParams}}
        {{/if}}
        config?: AxiosRequestConfig
      ) : Promise<{{responseType responses}}> {
        let pathParams = {};
        {{#if parameters}}
        {{#hasPathParams .}}pathParams = pathArgs;{{/hasPathParams}}
        {{/if}}
        const url = uriTemplates(`${this.options.baseUrl}{{@../key}}`).fill(pathParams);
        return this.http
          .{{@key}}<{{responseType responses}}>(`${url}{{#if parameters}}{{#hasQueryParams .}}${this.buildQuery(queryArgs)}{{/hasQueryParams}}{{/if}}`{{#if parameters}}{{#hasBodyParams .}},bodyArgs{{/hasBodyParams}}{{/if}}, config)
          .pipe(map(response => response.data))
          .toPromise();
      }

    {{/each}}
  {{/each}}

  private buildQuery(params: any) : string {
    const query = Object.entries(params)
      .map(this.encodeSingleCriteria)
      .join("&");
    if (!query) {
      return "";
    }
    return `?${query}`;
  }

  private encodeSingleCriteria([key, value]: [string, string | string[]]) : string {
    if (Array.isArray(value)) {
      return value.map(v => `${key}=${encodeURIComponent(v)}`).join("&");
    } else {
      return `${key}=${encodeURIComponent(value)}`;
    }
  }
}